plugins {
	id 'java'
	id 'maven-publish'
	id "checkstyle"
	id "com.gradleup.shadow" version "8.3.0"
	id "com.diffplug.spotless" version "6.20.0"
	id "de.undercouch.download" version "5.6.0"
	id "me.modmuss50.remotesign" version "0.4.0"
}

version = '1.0.1'

repositories {
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
    mavenCentral()
}

dependencies {
	implementation ('org.sharegov:mjson:1.4.1') {
		transitive false
	}

	testImplementation 'junit:junit:4.13.2'
}

base {
	archivesName = "fabric-installer"
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

checkstyle {
	configFile = project.file("checkstyle.xml")
	toolVersion = "8.45"
}

shadowJar {
	manifest {
		attributes 'Implementation-Title': 'FabricInstaller',
				'Implementation-Version': project.version,
				'Main-Class': 'net.fabricmc.installer.Main'
	}

	minimize()
	archiveClassifier.set(null)
	exclude('icon.ico')
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
tasks.register('serverJar', ShadowJar) {
	manifest {
		attributes 'Implementation-Title': 'FabricInstaller',
			'Implementation-Version': project.version,
			'Main-Class': 'net.fabricmc.installer.ServerLauncher'
	}

	minimize()
	exclude('icon.ico')
	exclude('*.png')
	exclude('natives/*')

	archiveClassifier = "server"
	from sourceSets.main.output
	configurations = [project.configurations.compileClasspath]
}

assemble.dependsOn serverJar
build.dependsOn shadowJar

jar {
	enabled = false

	manifest {
		attributes('Enable-Native-Access': 'ALL-UNNAMED')
	}
}

spotless {
	java {
		licenseHeaderFile(rootProject.file("HEADER"))
	}
}

// A task to ensure that the version being released has not already been released.
tasks.register('checkVersion') {
	doFirst {
		def xml = new URL("https://maven.fabricmc.net/net/fabricmc/fabric-installer/maven-metadata.xml").text
		def metadata = new groovy.xml.XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

class FileOutput extends DefaultTask {
	@OutputFile
	File output
}
